import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#The Plotter class will plot the metrics generated by the Evaluator class on all
#specified missing data fractions. The class requires an array containing the
#missing data fractions and an array containing the average IC-scores (or other scores?)
#for each missing data fraction.
class Plotter:
    def __init__(self):
        self.frac_of_miss_array = []
        self.performance_array = []
        self.stdev_array = []

    def add_score(self, fraction, mean, stdev):
        self.frac_of_miss_array.append(fraction)
        self.performance_array.append(mean)
        self.stdev_array.append(stdev)

    def plot_performance(self):
        #Create pandas dataframe with missing array data and reversed performance
        #df = pd.DataFrame({'frac_of_miss': self.frac_of_miss_array, 'scores': self.performance_array[::-1]})
        #Groupby for lineplot
        means = np.asarray(self.performance_array)
        stdevs = np.asarray(self.performance_array)
        fractions = sorted(set(self.frac_of_miss_array))
        #stdev = df.groupby('frac_of_miss')['scores'].std()
        #mean.index = np.arange(1, len(mean) + 1)
        #stdev.index = np.arange(1, len(stdev) + 1)
        #Get the boxplot frame
        #_, ax = plt.subplots()
        #Plot the mean
        #mean.plot(ax=ax)
        #Plot boxplot
        #df.boxplot(showfliers= False, ax=ax, column='scores', by='frac_of_miss')
        #Give y-axis name
        plt.errorbar(np.arange(len(fractions)), means, stdevs, lw=3)
        plt.ylabel('Performance')
        plt.title("PFP-model performance under varying missing data fractions")
        plt.savefig('performance_plot.png')
        plt.show()