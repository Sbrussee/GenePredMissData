import numpy as np
import matplotlib.pyplot as plt
from random import randint

#The Plotter class will plot the metrics generated by the Evaluator class on all
#specified missing data fractions. The class requires an array containing the
#missing data fractions and an array containing the average IC-scores (or other scores?)
#for each missing data fraction.
class Plotter:
    def __init__(self):
        self.frac_of_miss_array = []
        self.dictarray = []


    def add_score(self, fraction, mean):
        self.frac_of_miss_array.append(fraction)
        self.dictarray.append(mean)

    def plot_performance(self):
        uniquelist = []
        for key in self.dictarray[1].keys():
            if key not in uniquelist:
                uniquelist.append(key)
        for value in uniquelist:
            newarray = [d[value] for d in self.dictarray]
            fractions = sorted(set(self.frac_of_miss_array))
            amount_of_runs = self.frac_of_miss_array.count(0)
            means = dict.fromkeys(fractions)
            stdevs = dict.fromkeys(fractions)

            for index, fraction in enumerate(self.frac_of_miss_array):
                print(index, fraction)
                #means[fraction] = np.mean(newarray[index-amount_of_runs:index])
                #stdevs[fraction] = np.std(newarray[index-amount_of_runs:index])#

        #means = np.asarray(list(means.values())[::-1])
        #stdevs = np.asarray(list(stdevs.values())[::-1])
        #plt.errorbar(np.arange(len(fractions)), means, stdevs, lw=3, fmt='ok')
        #plt.xticks(np.arange(len(fractions)), [100 - x for x in fractions[::-1]])
        #plt.plot(means)
        #plt.ylabel('Performance score')
        #plt.xlabel('Percentage of missing data')
        #plt.title("PFP-model performance under varying missing data fractions")
        #plt.savefig('performance_plot.png')
        #plt.show()

def test(get_precision, get_f1):
    keys = {'precision','f-score'}
    evaluation_dict = dict.fromkeys(keys)
    if 'precision' in keys:
        evaluation_dict['precision'] = get_precision
    if 'f-score' in keys:
        evaluation_dict['f-score'] = get_f1
    return evaluation_dict

def main():
    plotter = Plotter()
    for fraction in range (0,100,10):
        for round in range (0,10,1):
            random1 = randint(0,10)
            random2 = randint(0,15)
            value1 = fraction + random1
            value2 = fraction + random2
            dictionary = test(value1,value2)
            plotter.add_score(fraction, dictionary)
    plotter.plot_performance()
main()